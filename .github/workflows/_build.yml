name: Build OCI

on:
  workflow_call:
    inputs:
      containerfile:
        description: 'Path to the Containerfile to build'
        required: false
        type: string
        default: './Containerfile'
      image-name:
        description: 'The name of the image to build'
        required: true
        type: string
      os-version:
        description: 'The version of the OS to build'
        required: true
        type: string
      build-args:
        description: 'Additional build arguments to pass to the build'
        required: false
        type: string
      platforms:
        description: 'The architectures to build for'
        required: false
        type: string
        default: 'amd64 arm64'
      target:
        description: 'The Containerfile target to build'
        required: false
        type: string
      base-image-versions-file:
        description: 'The path to the base image version file'
        required: false
        type: string
        default: './image-versions.yaml'
      base-image-name:
        description: 'The base image selector to use'
        required: false
        type: string

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ inputs.image-name }}

jobs:
  generate_matrix:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.MATRIX }}
    steps:
      - name: Generate Matrix
        id: generate-matrix
        env:
          PLATFORMS: ${{ inputs.platforms }}
        run: |
          platforms=()
          while IFS= read -r -d '' platform; do
            [[ -n "$platform" ]] && platforms+=("$platform")
          done < <(printf '%s\0' $PLATFORMS)

          for platform in "${platforms[@]}"; do
            echo "Platform: $platform"
          done

          # Create an empty matrix
          matrix="{\"include\": []}"

          # Iterate over each platform
          for platform in "${platforms[@]}"; do
            # Add the platform to the matrix
            matrix=$(jq ".include += [{\"platform\": \"${platform}\"}]" <<< "${matrix}")
          done

          # Output the matrix
          echo "MATRIX=${matrix}"
          MATRIX=$(echo "${matrix}" | jq -c .)
          echo "MATRIX=${MATRIX}" >> $GITHUB_OUTPUT

  build:
    runs-on: ${{ matrix.platform == 'amd64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    needs: generate_matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate_matrix.outputs.matrix) }}
    permissions:
      contents: read
      packages: write
      id-token: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Generate Tags
        uses: rsturla-homelab/actions/generate-image-tags@main
        id: generate-tags
        with:
          os-version: stream10
          is-release: ${{ github.ref == 'refs/heads/main' }}
          arch: ${{ matrix.platform }}

      - name: Query OCI Image Digest
        if: ${{ inputs.base-image-name != '' }}
        id: query-base-image
        env:
          IMAGE_VERSION_FILE: ${{ inputs.base-image-versions-file }}
          BASE_IMAGE_NAME: ${{ inputs.base-image-name }}
        run: |
          if [[ -f "$IMAGE_VERSION_FILE" ]]; then
            IMAGE=$(yq -r ".images[] | select(.name == \"$BASE_IMAGE_NAME\") | .image" $IMAGE_VERSION_FILE)
            if [[ -z "$IMAGE" ]]; then
              echo "Image not found in $IMAGE_VERSION_FILE"
              exit 1
            fi

            TAG=$(yq -r ".images[] | select(.name == \"$BASE_IMAGE_NAME\") | .tag" $IMAGE_VERSION_FILE)
            if [[ -z "$TAG" ]]; then
              echo "Tag not found in $IMAGE_VERSION_FILE"
              exit 1
            fi

            DIGEST=$(yq -r ".images[] | select(.name == \"$BASE_IMAGE_NAME\") | .digest" $IMAGE_VERSION_FILE)
            if [[ -z "$DIGEST" ]]; then
              echo "Digest not found in $IMAGE_VERSION_FILE"
              exit 1
            fi

            echo "IMAGE=${IMAGE}" >> $GITHUB_OUTPUT
            echo "TAG=${TAG}" >> $GITHUB_OUTPUT
            echo "DIGEST=${DIGEST}" >> $GITHUB_OUTPUT
          else
            echo "File not found: $IMAGE_VERSION_FILE"
            exit 1
          fi

      - name: Login to Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin
          cat ${XDG_RUNTIME_DIR}/containers/auth.json > ~/.docker/config.json

      - name: Build
        id: build
        env:
          CONTAINERFILE: ${{ inputs.containerfile }}
          BUILD_ARGS: ${{ inputs.build-args }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          TARGET: ${{ inputs.target }}
          BASE_IMAGE_REGISTRY: ${{ steps.query-base-image.outputs.IMAGE }}
          BASE_IMAGE_TAG: ${{ steps.query-base-image.outputs.TAG }}
          BASE_IMAGE_DIGEST: ${{ steps.query-base-image.outputs.DIGEST }}
        run: |
          build_args=""
          IFS=' ' read -r -a build_args <<< "$BUILD_ARGS"
          for arg in "${build_args[@]}"; do
            build_args="$build_args --build-arg $arg"
          done

          if [[ -n "${TARGET}" ]]; then
            build_args="$build_args --target ${TARGET}"
          fi

          if [[ -n "${BASE_IMAGE_REGISTRY}" ]]; then
            build_args="$build_args --build-arg BASE_IMAGE_REGISTRY=${BASE_IMAGE_REGISTRY}"
          fi
          if [[ -n "${BASE_IMAGE_TAG}" ]]; then
            build_args="$build_args --build-arg BASE_IMAGE_TAG=${BASE_IMAGE_TAG}"
          fi
          if [[ -n "${BASE_IMAGE_DIGEST}" ]]; then
            build_args="$build_args --build-arg BASE_IMAGE_DIGEST=${BASE_IMAGE_DIGEST}"
          fi

          podman build \
            --iidfile /tmp/image-id \
            --timestamp=0 \
            $build_args \
            -f $CONTAINERFILE \
            .

          echo "IMAGE_ID=$(cat /tmp/image-id)" >> $GITHUB_OUTPUT

      - name: Push
        id: push
        env:
          IMAGE_ID: ${{ steps.build.outputs.IMAGE_ID }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          TAGS: ${{ steps.generate-tags.outputs.tags }}
        run: |
          IFS=' ' read -r -a tags <<< "$TAGS"
          for tag in "${tags[@]}"; do
            podman push \
              --digestfile /tmp/digestfile \
              $IMAGE_ID \
              $IMAGE_NAME:$tag
          done

          echo "DIGEST=$(cat /tmp/digestfile)" >> $GITHUB_OUTPUT

      - name: Create Outputs
        id: create-outputs
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          OS_VERSION: ${{ inputs.os-version }}
          PLATFORM: ${{ matrix.platform }}
          DIGEST: ${{ steps.push.outputs.DIGEST }}
        run: |
          OUTPUT_ARTIFACT_NAME=$(echo "$IMAGE_NAME-$OS_VERSION-$PLATFORM" | tr '/' '-')

          mkdir -p /tmp/outputs/digests
          echo "${DIGEST}" > /tmp/outputs/digests/${PLATFORM}

          echo "OUTPUT_ARTIFACT_NAME=${OUTPUT_ARTIFACT_NAME}" >> $GITHUB_OUTPUT

      - name: Upload Output Artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ steps.create-outputs.outputs.OUTPUT_ARTIFACT_NAME }}
          retention-days: 1
          if-no-files-found: error
          path: |
            /tmp/outputs/digests/*


  manifest:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      IMAGE_NAME: ${{ steps.push-manifest.outputs.IMAGE_NAME }}
      DIGEST: ${{ steps.push-manifest.outputs.DIGEST }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Determine Build Output Name
        id: artifact-prefix
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          OS_VERSION: ${{ inputs.os-version }}
        run: |
          OUTPUT_ARTIFACT_PREFIX=$(echo "$IMAGE_NAME-$OS_VERSION" | tr '/' '-')
          echo "OUTPUT_ARTIFACT_PREFIX=${OUTPUT_ARTIFACT_PREFIX}" >> $GITHUB_OUTPUT

      - name: Fetch Build Outputs
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          pattern: ${{ steps.artifact-prefix.outputs.OUTPUT_ARTIFACT_PREFIX }}*
          merge-multiple: true
          path: /tmp/artifacts

      - name: Load Outputs
        id: load-outputs
        run: |
          DIGESTS_JSON=$(jq -n '{}')
          for digest_file in /tmp/artifacts/*; do
            # Extract the platform from the file name
            PLATFORM=$(basename $digest_file)
            DIGEST=$(cat $digest_file)
            # Add the platform and digest to the JSON object
            DIGESTS_JSON=$(echo "$DIGESTS_JSON" | jq --arg key "$PLATFORM" --arg value "$DIGEST" '. + {($key): $value}')
          done
          echo "DIGESTS_JSON=$(echo $DIGESTS_JSON | jq -c '.')"
          echo "DIGESTS_JSON=$(echo $DIGESTS_JSON | jq -c '.')" >> $GITHUB_OUTPUT

      - name: Generate Tags
        uses: rsturla-homelab/actions/generate-image-tags@main
        id: generate-tags
        with:
          os-version: stream10
          is-release: ${{ github.ref == 'refs/heads/main' }}

      - name: Create Manifest
        id: create-manifest
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: |
          podman manifest create ${IMAGE_NAME}
          echo "MANIFEST=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Populate Manifest
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          MANIFEST: ${{ steps.create-manifest.outputs.MANIFEST }}
          DIGESTS_JSON: ${{ steps.load-outputs.outputs.DIGESTS_JSON }}
          PLATFORMS: ${{ inputs.platforms }}
        run: |
          DIGESTS=$(echo "$DIGESTS_JSON" | jq -c '.')
          # turn the comma separated string into a list
          platforms=()
          IFS=',' read -r -a platforms <<< "${PLATFORMS}"
          for platform in ${platforms[@]}; do
            digest=$(echo $DIGESTS | jq -r ".$platform")
            echo "Adding ${IMAGE_NAME}@$digest for $platform"
            podman manifest add $MANIFEST ${IMAGE_NAME}@$digest --arch $platform
          done

      - name: Login to Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin
          cat ${XDG_RUNTIME_DIR}/containers/auth.json > ~/.docker/config.json

      - name: Push Manifest
        id: push-manifest
        env:
          MANIFEST: ${{ steps.create-manifest.outputs.MANIFEST }}
          TAGS: ${{ steps.generate-tags.outputs.tags }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: |
          IFS=' ' read -ra tags <<< "$TAGS"
          for tag in "${tags[@]}"; do
            podman manifest push --all=false --digestfile=/tmp/digestfile "$MANIFEST" "$IMAGE_NAME:$tag"
          done

          DIGEST=$(cat /tmp/digestfile)
          echo "DIGEST=$DIGEST" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Sign Manifest
        id: sign-manifest
        uses: rsturla-homelab/actions/sign-image@main
        with:
          image-ref: ${{ steps.push-manifest.outputs.IMAGE_NAME }}@${{ steps.push-manifest.outputs.DIGEST }}
          cosign-private-key: ${{ secrets.COSIGN_PRIVATE_KEY }}
          cosign-key-passphrase: ${{ secrets.COSIGN_PASSWORD }}

  scan:
    runs-on: ubuntu-latest
    needs:
      - generate_matrix
      - build
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate_matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Determine Build Output Name
        id: artifact-prefix
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          OS_VERSION: ${{ inputs.os-version }}
          PLATFORM: ${{ matrix.platform }}
        run: |
          OUTPUT_ARTIFACT_PREFIX=$(echo "$IMAGE_NAME-$OS_VERSION-$PLATFORM" | tr '/' '-')
          echo "OUTPUT_ARTIFACT_PREFIX=${OUTPUT_ARTIFACT_PREFIX}" >> $GITHUB_OUTPUT

      - name: Fetch Build Outputs
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          pattern: ${{ steps.artifact-prefix.outputs.OUTPUT_ARTIFACT_PREFIX }}*
          merge-multiple: true
          path: /tmp/artifacts

      - name: Load Outputs
        id: load-outputs
        env:
          PLATFORM: ${{ matrix.platform }}
        run: |
          DIGEST=$(cat /tmp/artifacts/${PLATFORM})
          echo "DIGEST=${DIGEST}" >> $GITHUB_OUTPUT

      - name: Login to Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin
          cat ${XDG_RUNTIME_DIR}/containers/auth.json > ~/.docker/config.json

      - name: Pull Image
        id: pull-image
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          DIGEST: ${{ steps.load-outputs.outputs.DIGEST }}
        run: docker pull $IMAGE_NAME@$DIGEST

      - name: Generate SBOM
        uses: rsturla-homelab/actions/generate-sbom@main
        id: generate-sbom
        with:
          image-ref: ${{ env.IMAGE_NAME }}@${{ steps.load-outputs.outputs.DIGEST }}
          cosign-private-key: ${{ secrets.COSIGN_PRIVATE_KEY }}
          cosign-key-passphrase: ${{ secrets.COSIGN_PASSWORD }}
          compress: true

      - name: Scan SBOM
        uses: rsturla-homelab/actions/scan-sbom@main
        with:
          sbom-path: ${{ steps.generate-sbom.outputs.sbom-path }}

  integration-tests:
    uses: ./.github/workflows/_test.yml
    secrets: inherit
    needs: manifest
    with:
      image-ref: ${{ needs.manifest.outputs.IMAGE_NAME }}@${{ needs.manifest.outputs.DIGEST }}
